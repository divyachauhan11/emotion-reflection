{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8000';\nexport class ApiService {\n  static async handleResponse(response) {\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.detail || error.message || 'An error occurred');\n    }\n    return response.json();\n  }\n  static async analyzeEmotion(text) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text\n        })\n      });\n      const result = await this.handleResponse(response);\n      return result.data || result; // Handle both wrapped and direct responses\n    } catch (error) {\n      if (error instanceof Error) {\n        throw error;\n      }\n      throw new Error('Failed to analyze emotion');\n    }\n  }\n}","map":{"version":3,"names":["API_BASE_URL","ApiService","handleResponse","response","ok","error","json","Error","detail","message","analyzeEmotion","text","fetch","method","headers","body","JSON","stringify","result","data"],"sources":["C:/Users/hp/OneDrive/Desktop/emotion_analysis_tool/frontend/src/services/api.ts"],"sourcesContent":["import { ApiResponse, ApiError, EmotionAnalysis } from '../types';\r\n\r\nconst API_BASE_URL = 'http://localhost:8000';\r\n\r\nexport class ApiService {\r\n  private static async handleResponse<T>(response: Response): Promise<T> {\r\n    if (!response.ok) {\r\n      const error: ApiError = await response.json();\r\n      throw new Error(error.detail || error.message || 'An error occurred');\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  static async analyzeEmotion(text: string): Promise<EmotionAnalysis> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/analyze`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ text }),\r\n      });\r\n\r\n      const result = await this.handleResponse<ApiResponse<EmotionAnalysis>>(response);\r\n      return result.data || result; // Handle both wrapped and direct responses\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      }\r\n      throw new Error('Failed to analyze emotion');\r\n    }\r\n  }\r\n}"],"mappings":"AAEA,MAAMA,YAAY,GAAG,uBAAuB;AAE5C,OAAO,MAAMC,UAAU,CAAC;EACtB,aAAqBC,cAAcA,CAAIC,QAAkB,EAAc;IACrE,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;MAChB,MAAMC,KAAe,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAC7C,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACG,MAAM,IAAIH,KAAK,CAACI,OAAO,IAAI,mBAAmB,CAAC;IACvE;IACA,OAAON,QAAQ,CAACG,IAAI,CAAC,CAAC;EACxB;EAEA,aAAaI,cAAcA,CAACC,IAAY,EAA4B;IAClE,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMS,KAAK,CAAC,GAAGZ,YAAY,UAAU,EAAE;QACtDa,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEN;QAAK,CAAC;MAC/B,CAAC,CAAC;MAEF,MAAMO,MAAM,GAAG,MAAM,IAAI,CAAChB,cAAc,CAA+BC,QAAQ,CAAC;MAChF,OAAOe,MAAM,CAACC,IAAI,IAAID,MAAM,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOb,KAAK,EAAE;MACd,IAAIA,KAAK,YAAYE,KAAK,EAAE;QAC1B,MAAMF,KAAK;MACb;MACA,MAAM,IAAIE,KAAK,CAAC,2BAA2B,CAAC;IAC9C;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}