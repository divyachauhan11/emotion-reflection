{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8000';\nexport class ApiService {\n  static async handleResponse(response) {\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.detail || 'An error occurred');\n    }\n    return response.json();\n  }\n  static async analyzeEmotion(text) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text\n        })\n      });\n      return this.handleResponse(response);\n    } catch (error) {\n      if (error instanceof Error) {\n        throw error;\n      }\n      throw new Error('Network error occurred');\n    }\n  }\n  static async healthCheck() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/health`);\n      return this.handleResponse(response);\n    } catch (error) {\n      throw new Error('API health check failed');\n    }\n  }\n}","map":{"version":3,"names":["API_BASE_URL","ApiService","handleResponse","response","ok","error","json","Error","detail","analyzeEmotion","text","fetch","method","headers","body","JSON","stringify","healthCheck"],"sources":["C:/Users/hp/OneDrive/Desktop/emotion_analysis_tool/frontend/src/services/api.ts"],"sourcesContent":["import { ApiResponse, ApiError } from '../types';\r\n\r\nconst API_BASE_URL = 'http://localhost:8000';\r\n\r\nexport class ApiService {\r\n  private static async handleResponse<T>(response: Response): Promise<T> {\r\n    if (!response.ok) {\r\n      const error: ApiError = await response.json();\r\n      throw new Error(error.detail || 'An error occurred');\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  static async analyzeEmotion(text: string): Promise<ApiResponse> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/analyze`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ text }),\r\n      });\r\n\r\n      return this.handleResponse<ApiResponse>(response);\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      }\r\n      throw new Error('Network error occurred');\r\n    }\r\n  }\r\n\r\n  static async healthCheck(): Promise<{ status: string; message: string }> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/health`);\r\n      return this.handleResponse(response);\r\n    } catch (error) {\r\n      throw new Error('API health check failed');\r\n    }\r\n  }\r\n}"],"mappings":"AAEA,MAAMA,YAAY,GAAG,uBAAuB;AAE5C,OAAO,MAAMC,UAAU,CAAC;EACtB,aAAqBC,cAAcA,CAAIC,QAAkB,EAAc;IACrE,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;MAChB,MAAMC,KAAe,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAC7C,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACG,MAAM,IAAI,mBAAmB,CAAC;IACtD;IACA,OAAOL,QAAQ,CAACG,IAAI,CAAC,CAAC;EACxB;EAEA,aAAaG,cAAcA,CAACC,IAAY,EAAwB;IAC9D,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMQ,KAAK,CAAC,GAAGX,YAAY,UAAU,EAAE;QACtDY,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEN;QAAK,CAAC;MAC/B,CAAC,CAAC;MAEF,OAAO,IAAI,CAACR,cAAc,CAAcC,QAAQ,CAAC;IACnD,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,IAAIA,KAAK,YAAYE,KAAK,EAAE;QAC1B,MAAMF,KAAK;MACb;MACA,MAAM,IAAIE,KAAK,CAAC,wBAAwB,CAAC;IAC3C;EACF;EAEA,aAAaU,WAAWA,CAAA,EAAiD;IACvE,IAAI;MACF,MAAMd,QAAQ,GAAG,MAAMQ,KAAK,CAAC,GAAGX,YAAY,SAAS,CAAC;MACtD,OAAO,IAAI,CAACE,cAAc,CAACC,QAAQ,CAAC;IACtC,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,MAAM,IAAIE,KAAK,CAAC,yBAAyB,CAAC;IAC5C;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}