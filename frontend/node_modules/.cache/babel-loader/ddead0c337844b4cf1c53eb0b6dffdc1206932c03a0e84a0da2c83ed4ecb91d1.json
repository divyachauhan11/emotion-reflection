{"ast":null,"code":"export class ApiService {\n  static async healthCheck() {\n    try {\n      const response = await fetch(`${this.BASE_URL}/health`);\n      if (!response.ok) {\n        throw new Error('API health check failed');\n      }\n    } catch (error) {\n      console.warn('API not available, using mock data');\n    }\n  }\n  static async analyzeEmotion(text) {\n    try {\n      const response = await fetch(`${this.BASE_URL}/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to analyze emotion');\n      }\n      const data = await response.json();\n      if (!data.success || !data.data) {\n        throw new Error(data.error || 'Analysis failed');\n      }\n      return data.data;\n    } catch (error) {\n      console.warn('API unavailable, using mock analysis');\n      return this.getMockAnalysis(text);\n    }\n  }\n  static getMockAnalysis(text) {\n    // Simple mock emotion detection based on keywords\n    const lowerText = text.toLowerCase();\n    const emotionKeywords = {\n      happy: ['happy', 'joy', 'excited', 'great', 'amazing', 'wonderful', 'fantastic', 'love'],\n      sad: ['sad', 'depressed', 'down', 'unhappy', 'crying', 'tears', 'disappointed'],\n      anxious: ['anxious', 'nervous', 'worried', 'scared', 'afraid', 'panic', 'stress'],\n      angry: ['angry', 'mad', 'furious', 'hate', 'annoyed', 'frustrated', 'rage'],\n      excited: ['excited', 'thrilled', 'pumped', 'energetic', 'enthusiastic'],\n      confident: ['confident', 'strong', 'capable', 'ready', 'prepared', 'determined'],\n      overwhelmed: ['overwhelmed', 'too much', 'exhausted', 'tired', 'burnt out'],\n      surprised: ['surprised', 'shocked', 'unexpected', 'wow', 'amazing'],\n      fearful: ['fear', 'terrified', 'frightened', 'scary', 'afraid'],\n      disgusted: ['disgusted', 'gross', 'sick', 'revolted', 'yuck']\n    };\n    let detectedEmotion = 'neutral';\n    let maxMatches = 0;\n    let confidence = 0.5;\n\n    // Find emotion with most keyword matches\n    for (const [emotion, keywords] of Object.entries(emotionKeywords)) {\n      const matches = keywords.filter(keyword => lowerText.includes(keyword)).length;\n      if (matches > maxMatches) {\n        maxMatches = matches;\n        detectedEmotion = emotion;\n        confidence = Math.min(0.95, 0.6 + matches * 0.15);\n      }\n    }\n\n    // Generate contextual message\n    const messages = {\n      happy: \"It's wonderful to hear you're feeling positive! Keep embracing those good vibes.\",\n      sad: \"It's okay to feel sad sometimes. Remember that these feelings are temporary and you're not alone.\",\n      anxious: \"Anxiety is natural, especially when facing new challenges. Try taking deep breaths and remember your strengths.\",\n      angry: \"It's normal to feel frustrated. Consider what's within your control and healthy ways to express these feelings.\",\n      excited: \"Your excitement is contagious! Channel that energy into something meaningful.\",\n      confident: \"Your confidence is empowering! Trust in your abilities and keep moving forward.\",\n      overwhelmed: \"When things feel overwhelming, break them down into smaller, manageable steps.\",\n      surprised: \"Life is full of surprises! Embrace the unexpected moments.\",\n      fearful: \"Fear is a natural response. Face it one step at a time with courage.\",\n      disgusted: \"Strong reactions often signal important boundaries. Trust your instincts.\",\n      neutral: \"Sometimes feeling neutral is perfectly fine. You're taking time to process and reflect.\"\n    };\n    return {\n      emotion: detectedEmotion,\n      confidence: confidence,\n      message: messages[detectedEmotion] || messages.neutral\n    };\n  }\n}\nApiService.BASE_URL = 'http://localhost:5000/api';","map":{"version":3,"names":["ApiService","healthCheck","response","fetch","BASE_URL","ok","Error","error","console","warn","analyzeEmotion","text","method","headers","body","JSON","stringify","data","json","success","getMockAnalysis","lowerText","toLowerCase","emotionKeywords","happy","sad","anxious","angry","excited","confident","overwhelmed","surprised","fearful","disgusted","detectedEmotion","maxMatches","confidence","emotion","keywords","Object","entries","matches","filter","keyword","includes","length","Math","min","messages","neutral","message"],"sources":["C:/Users/hp/OneDrive/Desktop/emotion_analysis_tool/frontend/src/services/api.ts"],"sourcesContent":["import { EmotionAnalysis, ApiResponse } from '../types';\r\n\r\nexport class ApiService {\r\n  private static readonly BASE_URL = 'http://localhost:5000/api';\r\n\r\n  static async healthCheck(): Promise<void> {\r\n    try {\r\n      const response = await fetch(`${this.BASE_URL}/health`);\r\n      if (!response.ok) {\r\n        throw new Error('API health check failed');\r\n      }\r\n    } catch (error) {\r\n      console.warn('API not available, using mock data');\r\n    }\r\n  }\r\n\r\n  static async analyzeEmotion(text: string): Promise<EmotionAnalysis> {\r\n    try {\r\n      const response = await fetch(`${this.BASE_URL}/analyze`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ text }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to analyze emotion');\r\n      }\r\n\r\n      const data: ApiResponse = await response.json();\r\n      \r\n      if (!data.success || !data.data) {\r\n        throw new Error(data.error || 'Analysis failed');\r\n      }\r\n\r\n      return data.data;\r\n    } catch (error) {\r\n      console.warn('API unavailable, using mock analysis');\r\n      return this.getMockAnalysis(text);\r\n    }\r\n  }\r\n\r\n  private static getMockAnalysis(text: string): EmotionAnalysis {\r\n    // Simple mock emotion detection based on keywords\r\n    const lowerText = text.toLowerCase();\r\n    \r\n    const emotionKeywords = {\r\n      happy: ['happy', 'joy', 'excited', 'great', 'amazing', 'wonderful', 'fantastic', 'love'],\r\n      sad: ['sad', 'depressed', 'down', 'unhappy', 'crying', 'tears', 'disappointed'],\r\n      anxious: ['anxious', 'nervous', 'worried', 'scared', 'afraid', 'panic', 'stress'],\r\n      angry: ['angry', 'mad', 'furious', 'hate', 'annoyed', 'frustrated', 'rage'],\r\n      excited: ['excited', 'thrilled', 'pumped', 'energetic', 'enthusiastic'],\r\n      confident: ['confident', 'strong', 'capable', 'ready', 'prepared', 'determined'],\r\n      overwhelmed: ['overwhelmed', 'too much', 'exhausted', 'tired', 'burnt out'],\r\n      surprised: ['surprised', 'shocked', 'unexpected', 'wow', 'amazing'],\r\n      fearful: ['fear', 'terrified', 'frightened', 'scary', 'afraid'],\r\n      disgusted: ['disgusted', 'gross', 'sick', 'revolted', 'yuck']\r\n    };\r\n\r\n    let detectedEmotion = 'neutral';\r\n    let maxMatches = 0;\r\n    let confidence = 0.5;\r\n\r\n    // Find emotion with most keyword matches\r\n    for (const [emotion, keywords] of Object.entries(emotionKeywords)) {\r\n      const matches = keywords.filter(keyword => lowerText.includes(keyword)).length;\r\n      if (matches > maxMatches) {\r\n        maxMatches = matches;\r\n        detectedEmotion = emotion;\r\n        confidence = Math.min(0.95, 0.6 + (matches * 0.15));\r\n      }\r\n    }\r\n\r\n    // Generate contextual message\r\n    const messages = {\r\n      happy: \"It's wonderful to hear you're feeling positive! Keep embracing those good vibes.\",\r\n      sad: \"It's okay to feel sad sometimes. Remember that these feelings are temporary and you're not alone.\",\r\n      anxious: \"Anxiety is natural, especially when facing new challenges. Try taking deep breaths and remember your strengths.\",\r\n      angry: \"It's normal to feel frustrated. Consider what's within your control and healthy ways to express these feelings.\",\r\n      excited: \"Your excitement is contagious! Channel that energy into something meaningful.\",\r\n      confident: \"Your confidence is empowering! Trust in your abilities and keep moving forward.\",\r\n      overwhelmed: \"When things feel overwhelming, break them down into smaller, manageable steps.\",\r\n      surprised: \"Life is full of surprises! Embrace the unexpected moments.\",\r\n      fearful: \"Fear is a natural response. Face it one step at a time with courage.\",\r\n      disgusted: \"Strong reactions often signal important boundaries. Trust your instincts.\",\r\n      neutral: \"Sometimes feeling neutral is perfectly fine. You're taking time to process and reflect.\"\r\n    };\r\n\r\n    return {\r\n      emotion: detectedEmotion,\r\n      confidence: confidence,\r\n      message: messages[detectedEmotion as keyof typeof messages] || messages.neutral\r\n    };\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}